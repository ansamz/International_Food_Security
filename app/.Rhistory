setwd("~/r_project")
setwd("~/r_project/app")
# Data Importing
#################
library(ggplot2)
shiny::runApp()
runApp()
runApp()
setwd("~/r_project")
# Data Importing
#################
library(ggplot2)
library(tidyr)
library(forecast)
library(tseries)
library(lubridate)
library(corrplot)
library(tidyverse)
library(car)
library(randomForest)
library(lattice)
library(gridExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(grid)
library(patchwork)
library(corrr)
library(pastecs)
#Read data
###############
merged_5_final = read.csv("merged_5_final.csv")
#basic statistics
################
stat.desc(merged_5_final)
dim(merged_5_final)
colnames(merged_5_final)
data2 <- drop_na(merged_5_final)
dim(data2)
sum(is.na(data2))
########################################################################################################
#################################### solo descriptive ###########################################################
########################################################################################################
###################### graph 1: temp change over years ###################################################
# for one random country
random_country <- sample(unique(merged_5_final$Country), 1)
selected_country <- merged_5_final[merged_5_final$Country == random_country, ]
ggplot(selected_country, aes(x = Year, y = Temperature.Change))+
geom_line(col = "grey50") +
geom_point()+
geom_smooth(method = lm, se = FALSE) +
xlab("Year")+
ylab("Temperature Change in °C") +
ggtitle (paste("Temperature Change 1980 - 2013 in", unique(selected_country$Country)),
subtitle = "Baseline Period: 1951 - 1980") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#for specific country (optional, e.g. Rwanda)
selected_country_fix <- merged_5_final[merged_5_final$Country == "Cameroon", ]
ggplot(selected_country_fix, aes(x = Year, y = Temperature.Change))+
geom_line(col = "grey50") +
geom_point()+
geom_smooth(method = lm, se = FALSE) +
xlab("Year")+
ylab("Temperature Change in °C") +
ggtitle (paste("Temperature Change 1980 - 2013 in", unique(selected_country_fix$Country)),
subtitle = "Baseline Period: 1951 - 1980") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# addition: subplots for all countries
ggplot(merged_5_final, aes(x = Year, y = Temperature.Change))+
geom_line(col = "grey50") +
geom_point()+
geom_smooth(method = lm, se = FALSE) +
xlab("Year")+
ylab("Temperature Change in °C") +
facet_wrap(~ Country) +
ggtitle (paste("Temperature Change 1980 - 2013 in", unique(merged_5_final$Country)),
subtitle = "Baseline Period: 1951 - 1980") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#############  graph 2 export and import quantities  #################################
# reshaping the data to another format.
# using the gather function from the tidyr package to convert the
# Import and Export columns into a single column representing the values,
# and another column indicating whether it's import or export.
# because we want separate axes for import and export
color_palette <- colorRampPalette(c("red", "blue"))
max.import <- max(selected_country$Total.Grains.Cereals.Root.Import.Quantity.1000.MT)
max.export <- max(selected_country$Total.Grains.Cereals.Root.Export.Quantity.1000.MT)
x.limit <- max(max.import, max.export)
# Creating two lattice plots
import_plot <- barchart(
as.character(Year) ~ Total.Grains.Cereals.Root.Import.Quantity.1000.MT,
data = selected_country,
horizontal = TRUE,
origin = 0,
scales = list(y = list(alternating = 1)),
xlab = "Import quanitity in million tonnes",
ylab = "Year",
xlim = c(0,x.limit),
col = color_palette(length(selected_country$Year)))
export_plot <- barchart(
as.character(Year) ~ Total.Grains.Cereals.Root.Export.Quantity.1000.MT,
data = selected_country,
horizontal = TRUE,
origin = 0,
scales = list(y = list(alternating = 1)),
xlab = "Export quanitity in million tonnes",
ylab = list("Year"),
xlim = c(0,x.limit),
col = color_palette(length(selected_country$Year)))
grid.arrange(import_plot, export_plot, ncol = 2)
combined_title <- paste("Import and Export of Grains, Cereals, and Root in", unique(selected_country$Country))
grid.text(combined_title, x = 0.5, y = 1, just = "center")
#####################  graph 3 import exportpercentage of total quanity ########################################################
####### preparation
# Calculate import and export percentages
selected_country2 <- selected_country %>% replace(is.na(.), 0)
# Calculate import and export percentages
selected_country2 <- selected_country2 %>%
mutate(Import_Percentage = (Total.Grains.Cereals.Root.Import.Quantity.1000.MT / (Total.Grains.Cereals.Root.Import.Quantity.1000.MT + Total.Grains.Cereals.Root.Export.Quantity.1000.MT)) * 100,
Export_Percentage = (Total.Grains.Cereals.Root.Export.Quantity.1000.MT / (Total.Grains.Cereals.Root.Import.Quantity.1000.MT + Total.Grains.Cereals.Root.Export.Quantity.1000.MT)) * 100)
# Combine data for plotting
combined_data <- selected_country2 %>%
select(Year, Import_Percentage, Export_Percentage) %>%
pivot_longer(cols = c(Import_Percentage, Export_Percentage),
names_to = "Type",
values_to = "Percentage") %>%
arrange(Year, desc(Type)) %>%
replace(is.na(.), 0)
# fct_rev() function from the forcats package to reverse the order of the
# levels of the Type variable in the combined_data dataframe.
combined_data$Type <- fct_rev(combined_data$Type)
combined_data2 <- combined_data[combined_data$Type == "Export_Percentage", ]
# Create the line chart data
line_data <- combined_data2 %>%
select(Year, Percentage)
######### Create stacked bar plot
ggplot(combined_data, aes(x = Year, y = Percentage, fill = Type)) +
geom_bar(stat = "identity") +
labs(title = "Import and Export Percentages of total quantity",
x = "Year",
y = "Percentage",
fill = "Type") +
scale_fill_manual(values = c("Import_Percentage" = "#bdc9e1",
"Export_Percentage" = "#1c9099")) +
scale_y_continuous(limits = c(0, 100), expand = c(0, 0)) +
theme(legend.position = "bottom",
panel.grid.major.y = element_line(color = "grey95"),
#panel.grid.minor.y = element_line(color = "grey85"),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5))
str(combined_data)
######### Create stacked bar plot
ggplot(combined_data2, aes(x = Year, y = Percentage, fill = Type)) +
geom_bar(stat = "identity") +
labs(title = "Export Share of Total Quantity",
x = "Year",
y = "Percentage")+
scale_fill_manual(values = c("Export_Percentage" = "#1c9099")) +
scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) +
theme(legend.position = "bottom",
panel.grid.major.y = element_line(color = "grey95"),
#panel.grid.minor.y = element_line(color = "grey85"),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5))
#####
ggplot(combined_data, aes(x = as.numeric(Year), y = Percentage, color = Type)) +
geom_line() +
labs(title = "Import and Export Percentages",
x = "Year",
y = "Percentage",
fill = "Type") +
theme_minimal() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5))
colnames(merged_5_final)
str(merged_5_final)
unique(merged_5_final$Continent)
# ne_countries to get geographic information
world <- ne_countries(scale = "medium", returnclass = "sf")
head(world)
st_drivers()
cor.test(data2$`Temperature.Change`,
data2$`Total.Grains.Cereals.Root.Production.Quantity.1000.MT`)
t.test(data2$`Temperature.Change`,
data2$`Total.Grains.Cereals.Root.Production.Quantity.1000.MT`)
anova_result <- aov(`Temperature.Change` ~ Continent, data = data2)
print(anova_result)
lm_model <- lm(`Temperature.Change` ~ `Total.Grains.Cereals.Root.Production.Quantity.1000.MT` +
`Total.Grains.Cereals.Root.Food.Supply.1000.MT` + `Total.Grains.Cereals.Root.Area.Harvested.1000.Ha`,
data = data2)
summary(lm_model)
setwd("~/r_project/app")
runApp()
runApp()
